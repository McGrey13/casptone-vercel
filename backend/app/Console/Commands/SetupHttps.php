<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;

class SetupHttps extends Command
{
    protected $signature = 'https:setup {--domain= : Domain name for SSL setup}';
    protected $description = 'Setup HTTPS configuration for production';

    public function handle()
    {
        $domain = $this->option('domain') ?: $this->ask('Enter your domain name (e.g., yourdomain.com)');
        
        if (!$domain) {
            $this->error('Domain name is required!');
            return 1;
        }

        $this->info("Setting up HTTPS configuration for domain: {$domain}");

        // Update environment configuration
        $this->updateEnvironmentConfig($domain);

        // Generate SSL certificate script
        $this->generateSslScript($domain);

        // Update CORS configuration
        $this->updateCorsConfig($domain);

        $this->info('HTTPS configuration setup completed!');
        $this->info('Please review the generated files and follow the SSL_SETUP_GUIDE.md for certificate installation.');
        
        return 0;
    }

    private function updateEnvironmentConfig($domain)
    {
        $envPath = base_path('.env');
        $envExamplePath = base_path('.env.example');
        
        // Create .env.example with HTTPS settings if it doesn't exist
        if (!File::exists($envExamplePath)) {
            $envExampleContent = File::get(base_path('.env.example'));
        } else {
            $envExampleContent = "# HTTPS Configuration\n";
            $envExampleContent .= "APP_ENV=production\n";
            $envExampleContent .= "APP_URL=https://{$domain}\n";
            $envExampleContent .= "FORCE_HTTPS=true\n";
            $envExampleContent .= "SESSION_SECURE_COOKIE=true\n";
            $envExampleContent .= "SESSION_HTTP_ONLY=true\n";
            $envExampleContent .= "SESSION_ENCRYPT=true\n";
            $envExampleContent .= "SESSION_LIFETIME=60\n";
            $envExampleContent .= "CORS_ALLOWED_ORIGINS=https://{$domain},https://www.{$domain}\n";
            $envExampleContent .= "SANCTUM_STATEFUL_DOMAINS={$domain},www.{$domain}\n";
            
            File::put($envExamplePath, $envExampleContent);
        }

        $this->info("Environment configuration updated for domain: {$domain}");
    }

    private function generateSslScript($domain)
    {
        $scriptContent = "#!/bin/bash\n\n";
        $scriptContent .= "# SSL Certificate Setup Script for {$domain}\n";
        $scriptContent .= "# Generated by CraftConnect HTTPS Setup\n\n";
        
        $scriptContent .= "echo 'Setting up SSL certificate for {$domain}...'\n\n";
        
        $scriptContent .= "# Install Certbot (Ubuntu/Debian)\n";
        $scriptContent .= "sudo apt update\n";
        $scriptContent .= "sudo apt install -y certbot python3-certbot-apache\n\n";
        
        $scriptContent .= "# Generate SSL certificate\n";
        $scriptContent .= "sudo certbot --apache -d {$domain} -d www.{$domain}\n\n";
        
        $scriptContent .= "# Test certificate renewal\n";
        $scriptContent .= "sudo certbot renew --dry-run\n\n";
        
        $scriptContent .= "# Setup automatic renewal\n";
        $scriptContent .= "echo '0 12 * * * /usr/bin/certbot renew --quiet' | sudo crontab -\n\n";
        
        $scriptContent .= "echo 'SSL certificate setup completed!'\n";
        
        File::put(base_path('setup-ssl.sh'), $scriptContent);
        
        // Make script executable
        chmod(base_path('setup-ssl.sh'), 0755);
        
        $this->info('SSL setup script generated: setup-ssl.sh');
    }

    private function updateCorsConfig($domain)
    {
        $corsConfigPath = config_path('cors.php');
        $corsContent = File::get($corsConfigPath);
        
        // Add HTTPS origins to CORS configuration
        $newOrigins = [
            "https://{$domain}",
            "https://www.{$domain}"
        ];
        
        // This is a simplified approach - in practice, you'd want to parse and update the array properly
        $this->info("CORS configuration should be updated to include:");
        foreach ($newOrigins as $origin) {
            $this->line("  - {$origin}");
        }
        
        $this->warn('Please manually update config/cors.php to include the HTTPS origins listed above.');
    }
}
