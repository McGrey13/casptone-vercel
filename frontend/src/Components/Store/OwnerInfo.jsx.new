import React, { useState, useEffect } from "react";
import { Card, CardContent } from "../ui/card";
import { Input } from "../ui/input";
import { Label } from "../ui/label";
import { Button } from "../ui/button";
import { Textarea } from "../ui/textarea";
import { MapPin } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import api from "../../api";

const OwnerInfo = ({ onNext, onBack, ownerData, setOwnerData }) => {
  const [errors, setErrors] = useState({});
  const [loadingLocation, setLoadingLocation] = useState(false);
  const [selectedRegion, setSelectedRegion] = useState("");
  const [isFetching, setIsFetching] = useState(true);

  const regions = [
    { code: "REGION_III", name: "Central Luzon" },
    { code: "CALABARZON", name: "CALABARZON" },
    { code: "NCR", name: "Metro Manila" }
  ];

  const citiesByRegion = {
    REGION_III: ["Angeles City", "Mabalacat", "San Fernando"],
    CALABARZON: ["Calamba", "Lipa City", "Batangas City"],
    NCR: ["Manila", "Quezon City", "Makati"]
  };

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await api.get('/profile');
        console.log("Profile data:", response.data);
        setOwnerData(prev => ({
          ...prev,
          fullName: response.data.name,
          email: response.data.email
        }));
      } catch (error) {
        console.error("Failed to fetch user data:", error);
        setErrors(prev => ({ ...prev, fetch: "Failed to load user data" }));
      } finally {
        setIsFetching(false);
      }
    };

    fetchUserData();
  }, [setOwnerData]);

  const fetchLocation = async () => {
    setLoadingLocation(true);
    setErrors({});

    try {
      if (!navigator.geolocation) {
        throw new Error("Geolocation is not supported");
      }

      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject);
      });

      const { latitude, longitude } = position.coords;
      console.log("Location coordinates:", { latitude, longitude });

      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&countrycodes=ph`
      );
      const data = await response.json();
      console.log("Location data:", data);

      const locationData = {
        region: data.address.state || data.address.region || "",
        city: data.address.city || data.address.town || data.address.municipality || "",
        address: data.display_name || "",
        postcode: data.address.postcode || ""
      };

      const regionMatch = regions.find(r => 
        r.name.toLowerCase().includes(locationData.region.toLowerCase()) ||
        locationData.region.toLowerCase().includes(r.name.toLowerCase())
      );

      if (regionMatch) {
        setSelectedRegion(regionMatch.code);
        setOwnerData(prev => ({
          ...prev,
          region: regionMatch.code,
          city: locationData.city,
          address: `${locationData.address}, Philippines`,
          zipCode: locationData.postcode
        }));
      } else {
        setErrors(prev => ({
          ...prev,
          location: "Could not determine your region. Please select manually."
        }));
      }
    } catch (error) {
      console.error("Location error:", error);
      setErrors(prev => ({
        ...prev,
        location: "Could not get your location. Please enter manually."
      }));
    } finally {
      setLoadingLocation(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setOwnerData(prev => ({ ...prev, [name]: value }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: "" }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    if (!ownerData.phone?.trim()) newErrors.phone = "Phone number is required";
    if (!ownerData.address?.trim()) newErrors.address = "Address is required";
    if (!ownerData.region) newErrors.region = "Region is required";
    if (!ownerData.city) newErrors.city = "City is required";
    if (!ownerData.zipCode?.trim()) newErrors.zipCode = "ZIP code is required";
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  if (isFetching) {
    return (
      <Card className="w-full bg-white">
        <CardContent className="pt-6 text-center">
          Loading user information...
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full bg-white">
      <CardContent className="pt-6">
        <h2 className="text-2xl font-bold text-center mb-2">Owner Information</h2>
        <p className="text-sm text-gray-500 text-center mb-4">Please verify your contact information</p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Personal Info Column */}
          <div className="space-y-3">
            <div>
              <Label htmlFor="fullName">Full Name</Label>
              <Input
                id="fullName"
                name="fullName"
                value={ownerData.fullName || ""}
                disabled
                className="bg-gray-50"
              />
            </div>
            
            <div>
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                value={ownerData.email || ""}
                disabled
                className="bg-gray-50"
              />
            </div>
            
            <div>
              <Label htmlFor="phone">Phone Number</Label>
              <Input
                id="phone"
                name="phone"
                placeholder="+63"
                value={ownerData.phone || ""}
                onChange={handleChange}
              />
              {errors.phone && <p className="text-sm text-red-500">{errors.phone}</p>}
            </div>
          </div>

          {/* Location Info Column */}
          <div className="space-y-3">
            <div>
              <Label htmlFor="address">Complete Address</Label>
              <div className="flex gap-2">
                <Textarea
                  id="address"
                  name="address"
                  value={ownerData.address || ""}
                  onChange={handleChange}
                  placeholder="Street, Building, etc."
                  className="flex-1"
                  rows={2}
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={fetchLocation}
                  disabled={loadingLocation}
                  className="h-auto"
                  title="Get current location"
                >
                  <MapPin className="w-4 h-4" />
                </Button>
              </div>
              {errors.address && <p className="text-sm text-red-500">{errors.address}</p>}
              {errors.location && <p className="text-sm text-red-500">{errors.location}</p>}
            </div>

            <div className="grid grid-cols-2 gap-2">
              <div>
                <Label htmlFor="region">Region</Label>
                <Select
                  value={ownerData.region || ""}
                  onValueChange={(value) => {
                    setSelectedRegion(value);
                    setOwnerData(prev => ({ ...prev, region: value, city: "" }));
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select region" />
                  </SelectTrigger>
                  <SelectContent>
                    {regions.map((region) => (
                      <SelectItem key={region.code} value={region.code}>
                        {region.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.region && <p className="text-sm text-red-500">{errors.region}</p>}
              </div>

              <div>
                <Label htmlFor="city">City/Municipality</Label>
                <Select
                  value={ownerData.city || ""}
                  onValueChange={(value) => setOwnerData(prev => ({ ...prev, city: value }))}
                  disabled={!selectedRegion}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select city" />
                  </SelectTrigger>
                  <SelectContent>
                    {(citiesByRegion[selectedRegion] || []).map((city) => (
                      <SelectItem key={city} value={city}>
                        {city}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.city && <p className="text-sm text-red-500">{errors.city}</p>}
              </div>
            </div>

            <div>
              <Label htmlFor="zipCode">ZIP Code</Label>
              <Input
                id="zipCode"
                name="zipCode"
                value={ownerData.zipCode || ""}
                onChange={handleChange}
                placeholder="0000"
                maxLength={4}
              />
              {errors.zipCode && <p className="text-sm text-red-500">{errors.zipCode}</p>}
            </div>
          </div>
        </div>

        <div className="flex justify-between mt-6">
          <Button onClick={onBack} variant="outline">Back</Button>
          <Button onClick={() => validateForm() && onNext()}>Next Step</Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default OwnerInfo;